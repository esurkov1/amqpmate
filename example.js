const AMQPMate = require('./index');

async function main() {
  // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const amqp = new AMQPMate('amqp://localhost', {
    reconnect: {
      maxRetries: 10,
      delay: 2000,
      backoffMultiplier: 1.5
    },
    logger: {
      info: (msg, meta) => console.log(`üì¢ ${msg}`, meta),
      error: (msg, meta) => console.error(`‚ùå ${msg}`, meta),
      warn: (msg, meta) => console.warn(`‚ö†Ô∏è  ${msg}`, meta),
      debug: (msg, meta) => console.debug(`üîç ${msg}`, meta)
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–µ–π
  amqp.listen('user.created', async (data) => {
    console.log('üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', data);
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –¥–æ–ª–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    await new Promise(resolve => setTimeout(resolve, 1000));
  });

  amqp.listen('order.placed', async (data) => {
    console.log('üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:', data);
    // –ò–Ω–æ–≥–¥–∞ —ç–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ retry
    if (Math.random() < 0.3) {
      throw new Error('–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞');
    }
  });

  // –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  await new Promise(resolve => setTimeout(resolve, 2000));

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  try {
    await amqp.send('user.created', {
      id: 123,
      name: 'Eugene',
      email: 'eugene@example.com'
    });

    await amqp.send('order.placed', {
      orderId: 456,
      userId: 123,
      amount: 99.99
    });

    console.log('üìä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error.message);
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  const metricsInterval = setInterval(() => {
    const metrics = amqp.getMetrics();
    console.log('\nüìà –ú–µ—Ç—Ä–∏–∫–∏:', {
      –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: metrics.messagesSent,
      –ø–æ–ª—É—á–µ–Ω–æ: metrics.messagesReceived,
      –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: metrics.messagesProcessed,
      –æ—à–∏–±–∫–∏: metrics.errors,
      —Å—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_–æ–±—Ä–∞–±–æ—Ç–∫–∏: `${metrics.avgProcessingTime}ms`,
      –≤—Ä–µ–º—è_—Ä–∞–±–æ—Ç—ã: `${Math.round(metrics.uptime / 1000)}s`,
      –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: metrics.reconnections
    });

    const health = amqp.getHealthCheck();
    console.log('üè• Health:', health.status, {
      –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: health.isConnected,
      –æ–∂–∏–¥–∞—é—â–∏—Ö_—Å–æ–æ–±—â–µ–Ω–∏–π: health.pendingMessages
    });
  }, 5000);

  // Graceful shutdown —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  setTimeout(async () => {
    console.log('\nüîÑ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è graceful shutdown...');
    clearInterval(metricsInterval);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ shutdown
    for (let i = 0; i < 3; i++) {
      await amqp.send('user.created', { id: 1000 + i, name: `User${i}` });
    }
    
    // Graceful shutdown –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await amqp.gracefulShutdown(15000);
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
    process.exit(0);
  }, 30000);
}

main().catch(console.error); 